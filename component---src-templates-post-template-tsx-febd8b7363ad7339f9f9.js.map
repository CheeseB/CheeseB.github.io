{"version":3,"file":"component---src-templates-post-template-tsx-febd8b7363ad7339f9f9.js","mappings":"uOAGA,MAAMA,GAAa,2ZA0DNC,EAAmC,MAC9CC,EAAAA,EAAAA,YAAU,KACR,MAkBMC,EAASC,SAASC,cAAc,UACtCC,OAAOC,QAnBkC,CACvC,YAAa,4BACb,eAAgB,mCAChB,gBAAiB,gBACjB,mBAAoB,uBACpB,eAAgB,WAChB,cAAe,IACf,yBAA0B,IAC1B,qBAAsB,IACtB,sBAAuB,MACvB,aAAc,QACd,eAAgB,OAChB,YAAa,KACbC,IAAK,+BACLC,YAAa,YACbC,MAAO,SAIkBC,SAAQC,IAAmB,IAAjBC,EAAKC,GAAM,EAC9CX,EAAOY,aAAaF,EAAKC,EAAM,IAGjC,MAAME,EAAYZ,SAASa,eAAe,oBAG1C,OAFID,GAAWA,EAAUE,YAAYf,GAE9B,KACDa,GAAWA,EAAUG,YAAYhB,EAAO,CAC7C,GACA,KAGDiB,EAAAA,EAAAA,IAACpB,EAAa,MACZoB,EAAAA,EAAAA,IAAAA,MAAAA,CAAKC,GAAG,uBCzFd,MAAMC,GAAgB,w2DA4PTC,EAAmDX,IAAe,IAAd,KAAEY,GAAM,EACvE,OAAOJ,EAAAA,EAAAA,IAACE,EAAgB,CAACG,wBAAyB,CAAEC,OAAQF,IAAU,E,cC3PxE,MAAMG,GAAmB,seAkCnBC,GAAQ,iOAgBRC,GAAK,ocA6BLC,GAAI,iOAgBGC,EAAqDnB,IAI3D,IAJ4D,MACjEoB,EAAK,KACLC,EAAI,WACJC,GACD,EACC,OACEd,EAAAA,EAAAA,IAACO,EAAmB,MAClBP,EAAAA,EAAAA,IAACQ,EAAQ,KAAEM,EAAWC,KAAK,OAC3Bf,EAAAA,EAAAA,IAACS,EAAK,KAAEG,IACRZ,EAAAA,EAAAA,IAACU,EAAI,KAAEG,GACa,ECzG1B,MAAMG,GAAe,iQAoBfC,GAAkBC,EAAAA,EAAAA,GAAOC,EAAAA,EAAW,qBAAlBD,CAAmB,iRAuB9BE,EAA6C5B,IAKnD,IALoD,MACzDoB,EAAK,KACLC,EAAI,WACJC,EAAU,UACVO,GACD,EACC,OACErB,EAAAA,EAAAA,IAACgB,EAAe,MACdhB,EAAAA,EAAAA,IAACiB,EAAe,CAACK,MAAOD,EAAWE,IAAI,eACvCvB,EAAAA,EAAAA,IAACW,EAAY,CAACC,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,IACpC,ECLtB,MArC2D,SAAU,GAKlE,IAJDU,MACEC,mBAAmB,MAAEC,IAEvBC,UAAU,KAAEC,IACb,EACC,MACEC,MAAM,KACJzB,EACA0B,aAAa,MACXlB,EAAK,QACLmB,EAAO,KACPlB,EAAI,WACJC,EACAO,WACEW,iBAAiB,gBAAEC,GAAiB,UACpCC,MAIJR,EAAM,GAEV,OACE1B,EAAAA,EAAAA,IAACmC,EAAAA,EAAQ,CAACvB,MAAOA,EAAOwB,YAAaL,EAASM,IAAKT,EAAMN,MAAOY,IAC9DlC,EAAAA,EAAAA,IAACsC,EAAAA,EAAc,CAACC,iBAAkBzB,EAAW,MAC7Cd,EAAAA,EAAAA,IAACoB,EAAQ,CACPR,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZO,UAAWY,KAEbjC,EAAAA,EAAAA,IAACG,EAAW,CAACC,KAAMA,KACnBJ,EAAAA,EAAAA,IAACnB,EAAa,MAGpB,C","sources":["webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport React, { FunctionComponent, useEffect } from 'react';\r\n\r\nconst GiscusWrapper = styled.div`\r\n  .giscus {\r\n    max-width: 1380px;\r\n    margin: 0 auto;\r\n    padding-left: 220px;\r\n  }\r\n\r\n  @media (max-width: 1440px) {\r\n    .giscus {\r\n      max-width: 980px;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 1024px) {\r\n    .giscus {\r\n      max-width: 700px;\r\n      padding-left: 0;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 744px) {\r\n    .giscus {\r\n      max-width: 100%;\r\n      padding: 0 36px;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 428px) {\r\n    .giscus {\r\n      padding: 0 28px;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 320px) {\r\n    .giscus {\r\n      padding: 0 18px;\r\n    }\r\n  }\r\n`;\r\n\r\ntype GiscusAttributesType = {\r\n  'data-repo': string;\r\n  'data-repo-id': string;\r\n  'data-category': string;\r\n  'data-category-id': string;\r\n  'data-mapping': string;\r\n  'data-strict': string;\r\n  'data-reactions-enabled': string;\r\n  'data-emit-metadata': string;\r\n  'data-input-position': string;\r\n  'data-theme': string;\r\n  'data-loading': string;\r\n  'data-lang': string;\r\n  src: string;\r\n  crossorigin: string;\r\n  async: string;\r\n};\r\n\r\nexport const CommentWidget: FunctionComponent = () => {\r\n  useEffect(() => {\r\n    const attributes: GiscusAttributesType = {\r\n      'data-repo': 'CheeseB/CheeseB.github.io',\r\n      'data-repo-id': 'MDEwOlJlcG9zaXRvcnkyOTQ5NzE5MTc=',\r\n      'data-category': 'Blog Comments',\r\n      'data-category-id': 'DIC_kwDOEZTqDc4CVlTC',\r\n      'data-mapping': 'pathname',\r\n      'data-strict': '0',\r\n      'data-reactions-enabled': '1',\r\n      'data-emit-metadata': '0',\r\n      'data-input-position': 'top',\r\n      'data-theme': 'light',\r\n      'data-loading': 'lazy',\r\n      'data-lang': 'ko',\r\n      src: 'https://giscus.app/client.js',\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    };\r\n\r\n    const script = document.createElement('script');\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      script.setAttribute(key, value);\r\n    });\r\n\r\n    const container = document.getElementById('giscus-container');\r\n    if (container) container.appendChild(script);\r\n\r\n    return () => {\r\n      if (container) container.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <GiscusWrapper>\r\n      <div id=\"giscus-container\" />\r\n    </GiscusWrapper>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\ninterface PostContentProps {\r\n  html: string;\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Renderer Style\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 1380px;\r\n  margin: 0 auto;\r\n  padding: 120px 0 120px 220px;\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  line-height: 2;\r\n  font-size: 20px;\r\n  font-weight: 400;\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 3px 0;\r\n    margin: 34px 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 28px;\r\n    margin-bottom: 60px;\r\n  }\r\n\r\n  * + h1 {\r\n    margin-top: 80px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 26px;\r\n    margin-bottom: 50px;\r\n  }\r\n\r\n  * + h2 {\r\n    margin-top: 70px;\r\n  }\r\n\r\n  h1 + h2 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 24px;\r\n    margin-bottom: 40px;\r\n  }\r\n\r\n  * + h3 {\r\n    margin-top: 60px;\r\n  }\r\n\r\n  h1 + h3,\r\n  h2 + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 4px solid lightgray;\r\n    font-weight: 400;\r\n    font-style: italic;\r\n    color: grey;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    padding: 30px 0;\r\n    margin-left: 26px;\r\n  }\r\n\r\n  ol ul,\r\n  ol ol,\r\n  ul ol,\r\n  ul ul {\r\n    padding: 0;\r\n  }\r\n\r\n  li {\r\n    margin: 4px 0;\r\n  }\r\n\r\n  li p {\r\n    margin: 0;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border: 2px solid lightgray;\r\n    margin: 80px 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    color: #ff8982;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 30px 0;\r\n    padding: 30px;\r\n    border-radius: 16px;\r\n    font-size: 18px;\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  }\r\n\r\n  @media (max-width: 1440px) {\r\n    width: 980px;\r\n  }\r\n\r\n  // Markdown Responsive Design\r\n  @media (max-width: 1024px) {\r\n    width: 700px;\r\n    font-size: 18px;\r\n    padding: 120px 0;\r\n\r\n    h1,\r\n    h2,\r\n    h3 {\r\n      margin-bottom: 50px;\r\n    }\r\n\r\n    * + h1,\r\n    * + h2,\r\n    * + h3 {\r\n      margin-top: 70px;\r\n    }\r\n\r\n    h1 {\r\n      font-size: 26px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 24px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 22px;\r\n    }\r\n\r\n    hr {\r\n      margin: 60px 0;\r\n    }\r\n\r\n    pre[class*='language-'] {\r\n      font-size: 16px;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 744px) {\r\n    width: 100%;\r\n    padding: 120px 36px;\r\n  }\r\n\r\n  @media (max-width: 428px) {\r\n    padding: 80px 28px;\r\n    font-size: 12px;\r\n\r\n    p {\r\n      margin: 16px 0;\r\n    }\r\n\r\n    h1 {\r\n      font-size: 20px;\r\n      margin-bottom: 40px;\r\n    }\r\n\r\n    * + h1 {\r\n      margin-top: 60px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 18px;\r\n      margin-bottom: 30px;\r\n    }\r\n\r\n    * + h2 {\r\n      margin-top: 50px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 16px;\r\n      margin-bottom: 20px;\r\n    }\r\n\r\n    * + h3 {\r\n      margin-top: 40px;\r\n    }\r\n\r\n    blockquote {\r\n      margin: 16px 0;\r\n      border-left: 2px solid lightgray;\r\n    }\r\n\r\n    ol,\r\n    ul {\r\n      padding: 16px 0;\r\n    }\r\n\r\n    hr {\r\n      margin: 40px 0;\r\n    }\r\n\r\n    pre[class*='language-'] {\r\n      margin: 16px 0;\r\n      padding: 18px;\r\n      font-size: 10px;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 320px) {\r\n    padding: 80px 18px;\r\n    font-size: 10px;\r\n\r\n    h1 {\r\n      font-size: 16px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 14px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 12px;\r\n    }\r\n\r\n    hr {\r\n      margin: 30px 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PostContent: FunctionComponent<PostContentProps> = ({ html }) => {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />;\r\n};\r\n","import styled from '@emotion/styled';\r\nimport React, { FunctionComponent } from 'react';\r\n\r\nexport type PostHeadInfoProps = {\r\n  title: string;\r\n  date: string;\r\n  categories: string[];\r\n};\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  justify-content: space-between;\r\n  width: 1420px;\r\n  height: 100%;\r\n  margin: 0 auto;\r\n  color: #ffffff;\r\n  padding: 100px 0 40px 220px;\r\n\r\n  @media (max-width: 1440px) {\r\n    width: 928px;\r\n  }\r\n\r\n  @media (max-width: 1024px) {\r\n    width: 700px;\r\n    padding: 80px 0 60px;\r\n  }\r\n\r\n  @media (max-width: 744px) {\r\n    width: 100%;\r\n    padding: 80px 36px 60px;\r\n  }\r\n\r\n  @media (max-width: 428px) {\r\n    padding: 60px 28px 30px;\r\n  }\r\n\r\n  @media (max-width: 320px) {\r\n    padding: 50px 18px 20px;\r\n  }\r\n`;\r\n\r\nconst Category = styled.div`\r\n  color: #fff;\r\n  font-size: 18px;\r\n  line-height: 26px;\r\n\r\n  @media (max-width: 1024px) {\r\n    font-size: 14px;\r\n    line-height: 20px;\r\n  }\r\n\r\n  @media (max-width: 428px) {\r\n    font-size: 12px;\r\n    line-height: 18px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 40px;\r\n  line-height: 70px;\r\n  font-weight: 800;\r\n  color: #fff;\r\n\r\n  @media (max-width: 1024px) {\r\n    font-size: 32px;\r\n    line-height: 46px;\r\n  }\r\n\r\n  @media (max-width: 428px) {\r\n    font-size: 24px;\r\n    line-height: 34px;\r\n  }\r\n\r\n  @media (max-width: 320px) {\r\n    font-size: 18px;\r\n    line-height: 26px;\r\n  }\r\n`;\r\n\r\nconst Date = styled.div`\r\n  color: #fff;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n\r\n  @media (max-width: 1024px) {\r\n    font-size: 12px;\r\n    line-height: 18px;\r\n  }\r\n\r\n  @media (max-width: 428px) {\r\n    font-size: 10px;\r\n    line-height: 14px;\r\n  }\r\n`;\r\n\r\nexport const PostHeadInfo: FunctionComponent<PostHeadInfoProps> = ({\r\n  title,\r\n  date,\r\n  categories,\r\n}) => {\r\n  return (\r\n    <PostHeadInfoWrapper>\r\n      <Category>{categories.join('/')}</Category>\r\n      <Title>{title}</Title>\r\n      <Date>{date}</Date>\r\n    </PostHeadInfoWrapper>\r\n  );\r\n};\r\n","import styled from '@emotion/styled';\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { PostHeadInfo, PostHeadInfoProps } from './PostHeadInfo';\r\n\r\ntype PostHeadProps = PostHeadInfoProps & {\r\n  thumbnail: IGatsbyImageData;\r\n};\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px;\r\n\r\n  @media (max-width: 1024px) {\r\n    height: 340px;\r\n    margin-top: 52px;\r\n  }\r\n\r\n  @media (max-width: 428px) {\r\n    height: 280px;\r\n    margin-top: 42px;\r\n  }\r\n\r\n  @media (max-width: 320px) {\r\n    height: 240px;\r\n  }\r\n`;\r\n\r\nconst BackgroundImage = styled(GatsbyImage)`\r\n  position: absolute;\r\n  z-index: -1;\r\n  width: 100%;\r\n  height: 400px;\r\n  object-fit: cover;\r\n  margin-left: 220px;\r\n  filter: brightness(0.3);\r\n\r\n  @media (max-width: 1024px) {\r\n    margin-left: 0;\r\n    height: 340px;\r\n  }\r\n\r\n  @media (max-width: 428px) {\r\n    height: 280px;\r\n  }\r\n\r\n  @media (max-width: 320px) {\r\n    height: 240px;\r\n  }\r\n`;\r\n\r\nexport const PostHead: FunctionComponent<PostHeadProps> = ({\r\n  title,\r\n  date,\r\n  categories,\r\n  thumbnail,\r\n}) => {\r\n  return (\r\n    <PostHeadWrapper>\r\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\r\n      <PostHeadInfo title={title} date={date} categories={categories} />\r\n    </PostHeadWrapper>\r\n  );\r\n};\r\n","import { SideNavigation } from 'components/Common/SideNavigation';\r\nimport { Template } from 'components/Common/Template';\r\nimport { CommentWidget } from 'components/Post/CommentWidget';\r\nimport { PostContent } from 'components/Post/PostContent';\r\nimport { PostHead } from 'components/Post/PostHead';\r\nimport { graphql } from 'gatsby';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { PostPageItemType } from 'types/PostItem.types';\r\n\r\ntype PostTemplateProps = {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: PostPageItemType[];\r\n    };\r\n  };\r\n  location: {\r\n    href: string;\r\n  };\r\n};\r\n\r\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}) {\r\n  const {\r\n    node: {\r\n      html,\r\n      frontmatter: {\r\n        title,\r\n        summary,\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n          publicURL,\r\n        },\r\n      },\r\n    },\r\n  } = edges[0];\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href} image={publicURL}>\r\n      <SideNavigation selectedCategory={categories[0]}></SideNavigation>\r\n      <PostHead\r\n        title={title}\r\n        date={date}\r\n        categories={categories}\r\n        thumbnail={gatsbyImageData}\r\n      />\r\n      <PostContent html={html} />\r\n      <CommentWidget />\r\n    </Template>\r\n  );\r\n};\r\n\r\nexport default PostTemplate;\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["GiscusWrapper","CommentWidget","useEffect","script","document","createElement","Object","entries","src","crossorigin","async","forEach","_ref","key","value","setAttribute","container","getElementById","appendChild","removeChild","___EmotionJSX","id","MarkdownRenderer","PostContent","html","dangerouslySetInnerHTML","__html","PostHeadInfoWrapper","Category","Title","Date","PostHeadInfo","title","date","categories","join","PostHeadWrapper","BackgroundImage","_styled","GatsbyImage","PostHead","thumbnail","image","alt","data","allMarkdownRemark","edges","location","href","node","frontmatter","summary","childImageSharp","gatsbyImageData","publicURL","Template","description","url","SideNavigation","selectedCategory"],"sourceRoot":""}